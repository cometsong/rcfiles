#!/usr/bin/env bash
#==============================================================================
#         FILE: skeleton_project_python [-v] [projectname [submodule_name]]
#  DESCRIPTION: Create py3 virtual env and skeleton_project folder structure, 
#               using '-v' to signal creating virtual machine
#       AUTHOR: B. Leopold (cometsong), benjamin(at)cometsong(dot)net
#    COPYRIGHT: Copyright (c) 2015, B. Leopold
#      LICENSE: GNU General Public License v3+
#      CREATED: 2015-05-01 11:39:32-0400
#      REVISED: 2018-04-03 08:53:02-0400    changed modules, add virtual option
#==============================================================================
set -o nounset                          # Treat unset variables as an error

AUTHOR='Benjamin Leopold (cometsong)'
EMAIL='benjamin(at)cometsong(dot)net'

### check leading option -v for virtualenv
if [[ "X$1" == "X-v" ]]; then
    virtual=yes
    shift
else
    virtual=""
fi

ProjectName=${1:-'skeleton_project'} && shift;
projectname=${ProjectName,,} # make lowercase

### more than 1 module?
declare -a module_names
# removed 'projectname', get all remaining args in array mode
if [[ $# -gt 1 ]]; then
    module_names=( "${@}" )
else
    module_names=( "${2:-app_module}" )
fi
base_modules=( attrs clize )
test_modules=( pytest pytest-flakes )

### 'array' lists for setup.py
printf -v inst_requires "        '%s',\n" ${base_modules[*]}
printf -v test_requires "        '%s',\n" ${test_modules[*]}
printf -v setuppackages "        '%s',\n" ${module_names[*]}

echo "Creating skeleton project folder...
    for ${ProjectName}
    with ${module_names// /, }
"

### Gittin It
git init ${projectname}

### .gitignore
cat <<EOF >> ${projectname}/.gitignore
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*\$py.class

build/
dist/
lib/
lib64/
eggs/
.eggs/
*.egg-info/
*.egg

# Installer logs
pip-log.txt
pip-delete-this-directory.txt
EOF

### Dirs, Files
mkdir -p ${projectname}/{bin,docs,tests};
touch ${projectname}/{setup,defaults,utils}.py
touch ${projectname}/tests/__init__.py

### projectname.py
cat <<EOF > ${projectname}/${projectname}.py
# -*- coding: utf-8 -*-
""" Project: ${ProjectName}
    Description, functional fun, purpose.
"""

import os
import sys

import attr
from clize import run

@attr.s
class MakeItHappen():
    """main class

    :param first: The first word you think of...
    :param second: If you think of a second word.
    """
    first: str = attr.ib()
    second = attr.ib(default='', converter=str)


def make_it_happen(first: str, *, second:'s'=''):
    """main class

    :param first: The first word you think of...
    :param second: If you think of a second word.
    """
    print(' '.join([first, second , '!']))
    

if __name__ == '__main__':
    run(make_it_happen)
EOF

### setup.py
cat <<EOF > ${projectname}/setup.py
try:
    from setuptools import setup, find_packages
except ImportError:
    raise

# get __version__
exec(open('${projectname}/__init__.py').read())

setup(
    name = '$ProjectName',
    description = 'The coolest ${ProjectName} project!',
    long_description = open("README.md").read(),
    version = __version__,
    license = 'Apache License 2.0',
    url = 'https://download.from.here/',
    download_url = 'https://download.from.here/releases/version.tar.gz',
    author = '${AUTHOR}',
    author_email = '${EMAIL}',
    install_requires = [
${inst_requires} ],
    tests_require = [
${test_requires} ],
    packages = [
${setuppackages} ],
    scripts = [ '${projectname}.py' ],
)
EOF

### projectname/__init__.py
cat <<EOF > ${projectname}/__init__.py
# -*- coding: utf-8 -*-
_version_info__ = (0, 1, '0a')
__version__ = ".".join(map(str,__version_info__))
EOF

### Module Contents
for module_name in "${module_names[@]}" ; do
    Module_name=${module_name^}   # first letter Uppercase
    module_name=${module_name,,}  # all lowercase
    module_test="${module_name}_test.py"
    echo " --- Adding module: '${module_name}' ..."
    mkdir -p ${projectname}/${module_name}
    touch ${projectname}/${module_name}/{__init__,${module_name}}.py
    touch ${projectname}/tests/${module_test}

### module/module_name.py
cat <<EOF > ${projectname}/${module_name}/${module_name}.py
# -*- coding: utf-8 -*-
""" Docstring for ${Module_name}
"""

import attr

@attr.s
class The${Module_name}():
    """main class

    :param first: The first word you think of...
    :param second: If you think of a second word.
    """
    first: str = attr.ib()
    second = attr.ib(default='', converter=str)

EOF

### module/__init__.py
cat <<EOF > ${projectname}/${module_name}/__init__.py
# -*- coding: utf-8 -*-
_version_info__ = (0, 1, '0a')
__version__ = ".".join(map(str,__version_info__))

from os import path
from glob import glob

__all__ = [ path.basename(f)[:-3]
    for f in glob(path.dirname(__file__)+"/*.py")
    ]
EOF

    ### module_tests.py
cat <<EOF > ${projectname}/tests/${module_test}
import pytest
import ${module_name}

@pytest.fixture
def tmp_files(tmpdir):
    print(tmpdir)
    p = tmpdir.mkdir("sub").join("hello.txt")
    p.write("content")
    assert p.read() == "content"
    assert len(tmpdir.listdir()) == 1
    yield p
    p.close()

def test_basic(tmp_files):
    assert test_needsfiles.read() == "content"
    assert p.read() == "content"
    assert 0 # deliberate test fail before writing it!
EOF

done # module_names

if [[ $virtual ]]; then
    echo ""
    ### mk venv
    python3 -m venv ${projectname}

    ### tests
    cd ${projectname}
    bash -c ". ./bin/activate && pip install --upgrade pip && pip install ${inst_requires} ${test_requires} && deactivate"
fi
