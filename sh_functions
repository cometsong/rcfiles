
# ---------------------------------------------------------------------------- #
#                                Shell Functions                               #
# ---------------------------------------------------------------------------- #
##### Dir Functions #####
function mdc() { 
    mkdir -p $1 
    cd $1 
}

cd () { # from cd_dot.sh (more comments for readability in there)
    if [[ $1 =~ "\.\.\." ]] 
    then
        YESDOTS=`echo $1 | sed 's/^\(\.*\)\(.*\)/\1/'`
        NOTDOTS=`echo $1 | sed 's/^\(\.*\)\(.*\)/\2/'`
        NOTDOTS=${NOTDOTS/\//}
        DOTS=${#YESDOTS}
        DOTDIR=''
        while [ $DOTS -gt 1 ]; do
            DOTDIR="$DOTDIR../" 
            DOTS=$((DOTS - 1))
        done
        cd $DOTDIR$NOTDOTS
    else
        builtin cd $1
    fi
}

##### chmod functions #####
# group-writable
function chmod-all-rw() {
  find . -type d -exec chmod 775 {} \;
  find . -type f -exec chmod 664 {} \;
}
# not group-writable
function chmod-all-r() {
  find . -type d -exec chmod 755 {} \;
  find . -type f -exec chmod 644 {} \;
}


##### Ruby/Rails/Rake ##### 
alias rsrv="./script/server -u"
alias rsrvp="ss -p"
alias rcon="./script/console"
alias rmig="rake db:migrate db:test:clone"
alias rdbf="rake db:recreate db:fixtures:load RAILS_ENV=development"
# setup rvm
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"


##### git ##### 
## Also see ~/.gitconfig ##
alias g="git"

function gfm() {
  git fetch $*
  git merge FETCH_HEAD
}
function gfms() {
  git fetch $*
  git merge FETCH_HEAD
  git submodule init
  git submodule update
}
function gbranch() {
  current_branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
}
function gpo() {
  # pushes the current branch; whatever that is
  gbranch
  git push origin $current_branch
}
function guo() {
  # pulls the current branch; whatever that is
  gbranch
  git pull origin $current_branch
}
function gpom() {
  git push origin master
}
function guom() {
  git pull origin master
}

# queries config for all remote repos, pushes master to all
function gpam { 
    REMOTES=`git remote -v | cut -f 1 | uniq`
    for R in $REMOTES; do 
        echo Pushing to $R
        git push --tags $R master
    done
}

# queries config for all remote repos, pushes current_branch to all
function gpab { 
    REMOTES=`git remote -v | cut -f 1 | uniq`
    gbranch
    for R in $REMOTES; do 
        echo Pushing \"$current_branch\" to \"$R\"
        git push --tags $R $current_branch
    done
}

##### Find a file with a pattern in name ##### 
function ff() { find . -type f -iname '*'$*'*' -ls ; }

##### Find a file with pattern $1 in name and Execute $2 on it ##### 
function fe()
{ find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; }

##### Find a pattern in a set of files and highlight them #####
# (needs a recent version of egrep)
function fstr()
{
    OPTIND=1
    local case=""
    local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
        i) case="-i " ;;
        *) echo "$usage"; return;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
    xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more 

}

##### move filenames to lowercase #####
function lowercase()  
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}

##### Handy Extract Program #####
function extract()
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}


